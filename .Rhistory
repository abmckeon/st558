scale_y_discrete(labels = c("Both Good", "One Worn/Broken", "Both Worn/Broken")) +
scale_fill_discrete(name = "Female Crab Color", labels = c("light", "medium", "dark", "darker"))
spineColorBarPlot
```
**Comment:** The majority of medium-colored female crabs have spines that are both worn or broken.
8. Recreate the set of side-by-side bar plots below. Youâ€™ll need to look up how to orient the x-axis lables
to 45 degrees. Write text that comments on any patterns you see.
``` {r linked side by side bar plot of spine X color X satellite}
crabs <- crabs %>% drop_na(spine, color, y)
sideBySideBarPlot <- ggplot(crabs, aes(x = color)) #define global properties
sideBySideBarPlot + geom_bar(aes(fill = y), position = "dodge") + #add local aes as well
labs(x = "Female Crab Spine Condition", y = "count") +
scale_x_discrete(labels = c("light", "medium", "dark", "darker")) +
scale_fill_discrete(name = NULL, labels = c("No Satellite", "At least 1 satellite")) +
theme(axis.text.x = element_text(angle = 45)) +
facet_grid(cols = vars(spine), scales = "free")
sideBySideBarPlot
```
**Comments:** For the most part, spines that are both worn or broken make up for the majority of females crabs, across all colors and satellite types. The only exception seems to be for light colored crabs.
9. Recreate the summary statistics below. Write text that interprets one of the sets of summary stats.
``` {r summary stats}
summaryStats <- as_tibble(crabs) %>%
group_by(color, y) %>%
summarise(Avg = mean(weight), Sd = sd(weight), Median = median(weight), IQR = IQR(weight))
summaryStats
```
boxPlotWeight <- ggplot(crabs, aes(x = y, y = weight))
boxPlotWeight + geom_boxplot(fill = "grey") +
geom_point(aes(col=y), position = "jitter")
labs(title = "Boxplot for Weight") +
stat_summary(aes(col = y))
boxPlotWeight
twoWayTidyverse <- crabs %>%
group_by(spine, y) %>%
summarise(count = n())
twoWayTidyverse
pivot_wider(twoWayTidyverse, names_from = "spine", value_from = "y")
twoWayTidyverse <- crabs %>%
group_by(spine, y) %>%
summarise(count = n()) %>%
pivot_wider(twoWayTidyverse, names_from = "spine", value_from = "y")
twoWayTidyverse <- crabs %>%
group_by(spine, y) %>%
summarise(count = n()) %>%
pivot_wider(twoWayTidyverse, names_from = "y", value_from = "count")
twoWayTidyverse <- crabs %>%
group_by(spine, y) %>%
pivot_wider(twoWayTidyverse, names_from = "spine", value_from = "y")
twoWayTidyverse <- crabs %>%
group_by(spine, y) %>%
summarise(count = n()) %>%
twoWayTidyverse
twoWayTidyverse <- crabs %>%
group_by(spine, y) %>%
summarise(count = n())
twoWayTidyverse
pivot_wider(twoWayTidyverse, names_from = "spine", value_from = y)
pivot_wider(twoWayTidyverse, names_from = spine, value_from = count)
twoWayTidyverse <- crabs %>%
group_by(spine, y) %>%
summarise(count = n())
twoWayTidyverse
pivot <- twoWayTidyverse  %>%
pivot_wider(pivot, names_from = spine, value_from = count)
pivot <- twoWayTidyverse  %>%
pivot_wider(pivot, names_from = "spine", value_from = "count")
library(tidyverse, dplyr)
twoWayTidyverse <- crabs %>%
group_by(spine, y) %>%
summarise(count = n()) %>%
pivot_wider(twoWayTidyverse, names_from = spine, value_from = count)
crabs <- readr::read_fwf("/Volumes/GoogleDrive/My Drive/NCSU/DSF Certificate Program/ST 558/ST558_Databases/crabs.txt", skip = 1, fwf_widths(c(3, 3, 5, 4, 5, 1), col_names = c("color","spine", "width", "satell", "weight", "y")))
crabs
twoWayTidyverse <- crabs %>%
group_by(satell, spine) %>%
summarise(count = n()) %>%
pivot_wider(twoWayTidyverse, names_from = spine, value_from = count)
twoWayTidyverse <- crabs %>%
group_by(satell, spine) %>%
summarise(count = n()) %>%
twoWayTidyverse
twoWayTidyverse <- crabs %>%
group_by(satell, spine) %>%
summarise(count = n()) %>%
twoWayTidyverse
twoWayTidyverse <- crabs %>%
group_by(satell, spine) %>%
summarise(count = n()) %>%
twoWayTidyverse
twoWayTidyverse <- crabs
group_by(satell, spine) %>%
summarise(count = n()) %>%
twoWayTidyverse
twoWayTable <- table(crabs$spine, crabs$satell)
twoWayTable
twoWayTidyverse <- crabs %>%
group_by(satell, spine) %>%
summarise(count = n()) %>%
twoWayTidyverse
```{r render, echo = FALSE, eval = FALSE}
```{r setup, echo = FALSE}
library(tidyverse, dplyr)
crabs <- readr::read_fwf("/Volumes/GoogleDrive/My Drive/NCSU/DSF Certificate Program/ST 558/ST558_Databases/crabs.txt", skip = 1, fwf_widths(c(3, 3, 5, 4, 5, 1), col_names = c("color","spine", "width", "satell", "weight", "y")))
crabs
1. Read in the data and modify the variables as mentioned in the notes. Print the updated data object out.
``` {r factor convert}
crabs$color <- factor(crabs$color)
levels(crabs$color) <- c("light", "medium", "dark", "darker")
crabs$spine <- factor(crabs$spine)
levels(crabs$spine) <- c("both good", "one worn or broken", "both worn or broken")
crabs$y <- factor(crabs$y)
levels(crabs$y) <- c( "No Satellite", "At least 1 satellite")
crabs
```
2. Create a one-way contingency table of the spine variable using the table() function.
``` {r one way contingency}
oneWayTable <- table(crabs$spine)
oneWayTable
```
3. Recreate the above one-way table using tidyverse functions. Hint: group_by() and summarize() can be used with the n() function to do the counting.
``` {r one way contingency tidyverse}
oneWayTidyverse <- crabs %>%
group_by(spine) %>%
summarise(count = n())
oneWayTidyverse
```
4. Create a two-way contingency table between the satellite and spine variables using the table() function. Write text describing what two of the numbers in the table represent.
``` {r two way contingency}
twoWayTable <- table(crabs$spine, crabs$satell)
twoWayTable
```
twoWayTidyverse <- crabs %>%
group_by(satell, spine) %>%
summarise(count = n()) %>%
twoWayTidyverse
twoWayTidyverse <- crabs %>%
group_by(satell, spine) %>%
summarise(count = n()) %>%
twoWayTidyverse
twoWayTidyverse <- crabs %>%
group_by(satell, spine) %>%
summarise(count = n())
twoWayTidyverse
twoWayTidyverse <- crabs %>%
group_by(satell, spine) %>%
pivot_wider(twoWayTidyverse, names_from = spine, value_from = count) %>%
summarise(count = n())
pivot <- twoWayTidyverse %>%
pivot_wider(twoWayTidyverse, names_from = spine, value_from = count)
twoWayTidyverse <- crabs %>%
group_by(satell, spine) %>%
summarise(count = n()) %>%
pivot_wider(twoWayTidyverse, names_from = spine, values_from = count)
twoWayTidyverse <- crabs %>%
group_by(satell, spine) %>%
summarise(count = n())
twoWayTidyverse
pivot <- twoWayTidyverse %>%
pivot_wider(twoWayTidyverse, names_from = spine, values_from = count)
library(tidyverse, dplyr)
observations <- c(54, 67, 32, 49, 42)
mean <- mean(observations)
getTOBS <- function(observations, mean, na.rm = FALSE) {
tOBS <- ((observations - mean)/(sd(observations) * sqrt(count(observations))))
return(tOBS)
}
help(qt)
observations <- c(54, 67, 32, 49, 42)
mean <- mean(observations)
getTOBS <- function(observations, mean) {
tOBS <- ((observations - mean)/(sd(observations) * sqrt(count(observations))))
return(tOBS)
}
sampleSize <- n(observations)
sampleSize <- n(observations)
sampleSize <- count(observations)
sampleSize <-summarise(observations, n())
observations <- c(54, 67, 32, 49, 42)
sampleSize <-summarise(observations, n())
sampleSize <-length(observations)
sampleSize
sampleSize <-length(observations)
alpha <- c(0.05)
dirAltHyp <- c("Left", "Right", "Two-Sided")
getTTest <- function(tOBS, sampleSize, alpha, dirAltHyp)) {
getTTest <- function(tOBS, sampleSize, alpha, dirAltHyp) {
ifelse (observations == mean) {
getTTest <- function(tOBS, sampleSize, alpha, dirAltHyp) {
ifelse (observations == mean, return("TRUE. We not do reject the null hypothesis."),
ifelse (dirAltHyp == "Two-Sided", return(abs(tOBS) > qt(0.975, (sampleSize-1))),
ifelse (dirAltHyp == "Left", return(tOBS < qt(0.05, (sampleSize-1))),
ifelse (dirAltHyp == "Right", return(tOBS > qt(0.95, (sampleSize-1)))
}
getTTest <- function(tOBS, sampleSize, alpha, dirAltHyp) {
ifelse (observations == mean, return("TRUE. We not do reject the null hypothesis."),
ifelse (dirAltHyp == "Two-Sided", return(abs(tOBS) > qt(0.975, (sampleSize-1))),
ifelse (dirAltHyp == "Left", return(tOBS < qt(0.05, (sampleSize-1))),
ifelse (dirAltHyp == "Right", return(tOBS > qt(0.95, (sampleSize-1)))
}
getTTest <- function(tOBS, sampleSize, alpha, dirAltHyp) {
ifelse (observations == mean, return("TRUE. We not do reject the null hypothesis."),
ifelse (dirAltHyp == "Two-Sided", return(abs(tOBS) > qt(0.975, (sampleSize-1))),
ifelse (dirAltHyp == "Left", return(tOBS < qt(0.05, (sampleSize-1))),
ifelse (dirAltHyp == "Right", return(tOBS > qt(0.95, (sampleSize-1))))
}
help(ifelse)
getTTest <- function(tOBS, sampleSize, alpha, dirAltHyp) {
ifelse (observations == mean, "TRUE. We not do reject the null hypothesis."),
getTTest <- function(tOBS, sampleSize, alpha, dirAltHyp) {
ifelse (observations == mean, "TRUE. We not do reject the null hypothesis.",
ifelse (dirAltHyp == "Two-Sided", (abs(tOBS) > qt(0.975, (sampleSize-1))),
ifelse (dirAltHyp == "Left", (tOBS < qt(0.05, (sampleSize-1))),
ifelse (dirAltHyp == "Right", (tOBS > qt(0.95, (sampleSize-1))))
}
getTTest <- function(tOBS, sampleSize, alpha, dirAltHyp) {
ifelse (observations == mean, "TRUE. We not do reject the null hypothesis.",
ifelse (dirAltHyp == "Two-Sided", (abs(tOBS) > qt(0.975, (sampleSize-1))),
ifelse (dirAltHyp == "Left", (tOBS < qt(0.05, (sampleSize-1))),
ifelse (dirAltHyp == "Right", (tOBS > qt(0.95, (sampleSize-1)))
}
getTTest <- function(tOBS, sampleSize, alpha, dirAltHyp) {
ifelse (observations == mean, "TRUE. We not do reject the null hypothesis.",
ifelse (dirAltHyp == "Two-Sided", (abs(tOBS) > qt(0.975, (sampleSize-1))),
ifelse (dirAltHyp == "Left", (tOBS < qt(0.05, (sampleSize-1))),
ifelse (dirAltHyp == "Right", (tOBS > qt(0.95, (sampleSize-1)))))
}
getTTest <- function(tOBS, sampleSize, alpha, dirAltHyp) {
ifelse (observations == mean, "TRUE. We not do reject the null hypothesis.",
ifelse (dirAltHyp == "Two-Sided", (abs(tOBS) > qt(0.975, (sampleSize-1))),
ifelse (dirAltHyp == "Left", (tOBS < qt(0.05, (sampleSize-1))),
ifelse (dirAltHyp == "Right", (tOBS > qt(0.95, (sampleSize-1)))))))
}
getTTest(tOBS, sampleSize, alpha, Two-Sided)
getTTest(5.0, sampleSize, alpha, "Two-Sided")
library(iris)
data(iris)
observations <- iris$Sepal.Length
getTTest(tOBS, sampleSize, alpha, "Two-Sided")
observations <- c(54, 67, 32, 49, 42)
mean <- mean(observations)
getTOBS <- function(observations, mean) {
tOBS <- ((observations - mean)/(sd(observations) * sqrt(count(observations))))
return(tOBS)
sampleSize <-length(observations)
alpha <- c(0.05)
dirAltHyp <- c("Left", "Right", "Two-Sided")
getTTest <- function(tOBS, sampleSize, alpha, dirAltHyp) {
ifelse (observations == mean, "TRUE. We not do reject the null hypothesis.",
ifelse (dirAltHyp == "Two-Sided", (abs(tOBS) > qt(0.975, (sampleSize-1))),
ifelse (dirAltHyp == "Left", (tOBS < qt(0.05, (sampleSize-1))),
ifelse (dirAltHyp == "Right", (tOBS > qt(0.95, (sampleSize-1)))))))
}
observations <- iris$Sepal.Length
getTTest(tOBS, sampleSize, alpha, "Two-Sided")
getTTest(tOBS, sampleSize, alpha, "Two-Sided") #Sepal length differs from 5.5 (i.e. test H0 : Î¼ = 5.5 vs HA : Î¼ Ì¸= 5.5 and report whether or not we reject H0)
getTTest
sepalLengthTTest <- getTTest(tOBS, sampleSize, alpha, "Two-Sided") #Sepal length differs from 5.5 (i.e. test H0 : Î¼ = 5.5 vs HA : Î¼ Ì¸= 5.5 and report whether or not we reject H0)
sepalLengthTTest
observations <- iris$Sepal.Length
mean <- 5.5
sepalLengthTTest <- getTTest(tOBS, sampleSize, alpha, "Two-Sided") #Sepal length differs from 5.5 (i.e. test H0 : Î¼ = 5.5 vs HA : Î¼ Ì¸= 5.5 and report whether or not we reject H0)
sepalLengthTTest
q()
getTTest <- function(tOBS, sampleSize, alpha, dirAltHyp) {
ifelse (observations == mean, "TRUE. We not do reject the null hypothesis.",
ifelse (dirAltHyp == "Two-Sided", (abs(tOBS) > qt(0.975, (sampleSize-1))),
ifelse (dirAltHyp == "Left", (tOBS < qt(0.05, (sampleSize-1))),
ifelse (dirAltHyp == "Right", (tOBS > qt(0.95, (sampleSize-1)))))))
}
getTTest
observations <- iris$Sepal.Length
mean <- 5.5
sepalLengthTTest <- getTTest(tOBS, sampleSize, alpha, "Two-Sided") #Sepal length differs from 5.5 (i.e. test H0 : Î¼ = 5.5 vs HA : Î¼ Ì¸= 5.5 and report whether or not we reject H0)
sepalLengthTTest
q()
q()
sampleSize <-length(observations)
alpha <- c(0.05)
dirAltHyp <- c("Left", "Right", "Two-Sided")
getTTest <- function(tOBS, sampleSize, alpha, dirAltHyp) {
ifelse (observations == mean, "TRUE. We not do reject the null hypothesis.",
ifelse (dirAltHyp == "Two-Sided", result <- (abs(tOBS) > qt(0.975, (sampleSize-1))),
ifelse (dirAltHyp == "Left", result <- (tOBS < qt(0.05, (sampleSize-1))),
ifelse (dirAltHyp == "Right", result <- (tOBS > qt(0.95, (sampleSize-1)))))))
}
return(result)
}
observations <- iris$Sepal.Length
mean <- 5.5
sepalLengthTTest <- getTTest(tOBS, sampleSize, alpha, "Two-Sided") #Sepal length differs from 5.5 (i.e. test H0 : Î¼ = 5.5 vs HA : Î¼ Ì¸= 5.5 and report whether or not we reject H0)
observations <- c(54, 67, 32, 49, 42)
mean <- mean(observations)
getTOBS <- function(observations, mean) {
tOBS <- ((observations - mean)/(sd(observations) * sqrt(count(observations))))
return(tOBS)
}
sampleSize <-length(observations)
alpha <- c(0.05)
dirAltHyp <- c("Left", "Right", "Two-Sided")
getTTest <- function(getTOBS, sampleSize, alpha, dirAltHyp) {
ifelse (observations == mean, "TRUE. We not do reject the null hypothesis.",
ifelse (dirAltHyp == "Two-Sided", result <- (abs(getTOBS) > qt(0.975, (sampleSize-1))),
ifelse (dirAltHyp == "Left", result <- (getTOBS < qt(0.05, (sampleSize-1))),
ifelse (dirAltHyp == "Right", result <- (getTOBS > qt(0.95, (sampleSize-1)))))))
}
return(result)
getTTest <- function(getTOBS, sampleSize, alpha, dirAltHyp) {
ifelse (observations == mean, "TRUE. We not do reject the null hypothesis.",
ifelse (dirAltHyp == "Two-Sided", result <- (abs(getTOBS) > qt(0.975, (sampleSize-1))),
ifelse (dirAltHyp == "Left", result <- (getTOBS < qt(0.05, (sampleSize-1))),
ifelse (dirAltHyp == "Right", result <- (getTOBS > qt(0.95, (sampleSize-1)))))))
}
return(result)
getTTest <- function(getTOBS, sampleSize, alpha, dirAltHyp) {
ifelse (observations == mean, "TRUE. We not do reject the null hypothesis.",
ifelse (dirAltHyp == "Two-Sided", result <- (abs(getTOBS) > qt(0.975, (sampleSize-1))),
ifelse (dirAltHyp == "Left", result <- (getTOBS < qt(0.05, (sampleSize-1))),
ifelse (dirAltHyp == "Right", result <- (getTOBS > qt(0.95, (sampleSize-1)))))))
return(result)
}
observations <- iris$Sepal.Length
mean <- 5.5
sepalLengthTTest <- getTTest(tOBS, sampleSize, alpha, "Two-Sided") #Sepal length differs from 5.5 (i.e. test H0 : Î¼ = 5.5 vs HA : Î¼ Ì¸= 5.5 and report whether or not we reject H0)
observations <- iris$Sepal.Length
mean <- 5.5
sepalLengthTTest <- getTTest(getTOBS, sampleSize, alpha, "Two-Sided") #Sepal length differs from 5.5 (i.e. test H0 : Î¼ = 5.5 vs HA : Î¼ Ì¸= 5.5 and report whether or not we reject H0)
sampleSize <-length(observations)
alpha <- c(0.05)
dirAltHyp <- c("Left", "Right", "Two-Sided")
getTTest <- function(getTOBS, sampleSize, alpha, dirAltHyp) {
ifelse (observations == mean, "TRUE. We not do reject the null hypothesis.",
ifelse (dirAltHyp == "Two-Sided", result <- (abs(getTOBS)) > qt(0.975, (sampleSize-1))),
ifelse (dirAltHyp == "Left", result <- (getTOBS < qt(0.05, (sampleSize-1))),
ifelse (dirAltHyp == "Right", result <- (getTOBS > qt(0.95, (sampleSize-1))))))
return(result)
}
observations <- iris$Sepal.Length
mean <- 5.5
sepalLengthTTest <- getTTest(getTOBS, sampleSize, alpha, "Two-Sided") #Sepal length differs from 5.5 (i.e. test H0 : Î¼ = 5.5 vs HA : Î¼ Ì¸= 5.5 and report whether or not we reject H0)
mean(Sepal.Length)
data(iris)
mean(iris$Sepal.Length)
mean(iris$Sepal.Width)
getTTest <- function(getTOBS, sampleSize, alpha, dirAltHyp) {
ifelse (observations == mean)
result <- paste("TRUE. We not do reject the null hypothesis.")
ifelse (dirAltHyp == "Two-Sided")
result <- abs(getTOBS) > qt(0.975, (sampleSize-1))
ifelse (dirAltHyp == "Left")
result <- getTOBS < qt(0.05, (sampleSize-1))
ifelse (dirAltHyp == "Right")
result <- getTOBS > qt(0.95, (sampleSize-1))
}
return(result)
getTTest <- function(getTOBS, sampleSize, alpha, dirAltHyp) {
ifelse (observations == mean) {
getTTest <- function(getTOBS, sampleSize, alpha, dirAltHyp) {
ifelse (observations == mean) {
help(rgamma)
library(tidyverse, dplyr)
rmarkdown::render("/Users/ashleebrookemckeon/Desktop/SummarizingData.Rmd", output_format = "html_document", output_dir = "/Users/ashleebrookemckeon/Desktop/")
title: "Summarizing Data"
author: "Ashlee McKeon"
date: '2022-06-10'
output: html_document
---
```{r render, echo = FALSE, eval = FALSE}
rmarkdown::render("/Users/ashleebrookemckeon/Desktop/SummarizingData.Rmd", output_format = "html_document", output_dir = "/Users/ashleebrookemckeon/Desktop/")
```
```{r setup, echo = FALSE}
library(tidyverse, dplyr)
```
``` {r read in using readr package}
crabs <- readr::read_fwf("/Volumes/GoogleDrive/My Drive/NCSU/DSF Certificate Program/ST 558/ST558_Databases/crabs.txt", skip = 1, fwf_widths(c(3, 3, 5, 4, 5, 1), col_names = c("color","spine", "width", "satell", "weight", "y")))
crabs
```
1. Read in the data and modify the variables as mentioned in the notes. Print the updated data object out.
``` {r factor convert}
crabs$color <- factor(crabs$color)
levels(crabs$color) <- c("light", "medium", "dark", "darker")
crabs$spine <- factor(crabs$spine)
levels(crabs$spine) <- c("both good", "one worn or broken", "both worn or broken")
crabs$y <- factor(crabs$y)
levels(crabs$y) <- c( "No Satellite", "At least 1 satellite")
crabs
```
2. Create a one-way contingency table of the spine variable using the table() function.
``` {r one way contingency}
oneWayTable <- table(crabs$spine)
oneWayTable
```
3. Recreate the above one-way table using tidyverse functions. Hint: group_by() and summarize() can be used with the n() function to do the counting.
``` {r one way contingency tidyverse}
oneWayTidyverse <- crabs %>%
group_by(spine) %>%
summarise(count = n())
oneWayTidyverse
```
4. Create a two-way contingency table between the satellite and spine variables using the table() function. Write text describing what two of the numbers in the table represent.
``` {r two way contingency}
twoWayTable <- table(crabs$spine, crabs$satell)
twoWayTable
```
crabs <- readr::read_fwf("/Volumes/GoogleDrive/My Drive/NCSU/DSF Certificate Program/ST 558/ST558_Databases/crabs.txt", skip = 1, fwf_widths(c(3, 3, 5, 4, 5, 1), col_names = c("color","spine", "width", "satell", "weight", "y")))
crabs
crabs$color <- factor(crabs$color)
levels(crabs$color) <- c("light", "medium", "dark", "darker")
crabs$spine <- factor(crabs$spine)
levels(crabs$spine) <- c("both good", "one worn or broken", "both worn or broken")
crabs$y <- factor(crabs$y)
levels(crabs$y) <- c( "No Satellite", "At least 1 satellite")
crabs
oneWayTable <- table(crabs$spine)
oneWayTable
oneWayTidyverse <- crabs %>%
group_by(spine) %>%
summarise(count = n())
oneWayTidyverse
twoWayTable <- table(crabs$spine, crabs$satell)
twoWayTable
twoWayTidyverse <- crabs %>%
group_by(satell, spine) %>%
summarise(count = n())
twoWayTidyverse
pivot <- twoWayTidyverse %>%
pivot_wider(twoWayTidyverse, names_from = spine, values_from = count)
pivot <- twoWayTidyverse %>%
pivot_wider(twoWayTidyverse, names_from = satell, values_from = count)
twoWayTidyverse <- crabs %>%
group_by(satell, spine) %>%
summarise(count = n())
twoWayTidyverse
pivot <- twoWayTidyverse %>%
pivot_wider(twoWayTidyverse, names_from = satell, spine, values_from = count)
threeWayTable <- table(crabs$spine, crabs$y, crabs$color)
threeWayTable
str(threeWayTable)
threeWayTable[, , 4]
crabs <- crabs %>% drop_na(color, y)
colorSatBarPlot <- ggplot(crabs, aes(y = color)) #define global properties
colorSatBarPlot + geom_bar(aes(fill = y), position = "dodge") + #add local aes as well
labs(x = "count", y = "Female Crab Color") +
scale_y_discrete(labels = c("light", "medium", "dark", "darker")) +
scale_fill_discrete(name = NULL, labels = c("No Satellite", "At least 1 satellite"))
colorSatBarPlot
``` {r side by side bar plot spine X satellite, echo = FALSE}
crabs <- crabs %>% drop_na(spine, y)
spineSatBarPlot <- ggplot(crabs, aes(y = spine)) #define global properties
spineSatBarPlot + geom_bar(aes(fill = y), position = "dodge") + #add local aes as well
labs(x = "count", y = "Female Crab Spine Condition") +
scale_y_discrete(labels = c("Both Good", "One Worn/Broken", "Both Worn/Broken")) +
scale_fill_discrete(name = NULL, labels = c("No Satellite", "At least 1 satellite"))
spineSatBarPlot
crabs <- crabs %>% drop_na(spine, color)
spineColorBarPlot <- ggplot(crabs, aes(y = spine)) #define global properties
spineColorBarPlot + geom_bar(aes(fill = color), position = "dodge") + #add local aes as well
labs(x = "count", y = "Female Crab Spine Condition") +
scale_y_discrete(labels = c("Both Good", "One Worn/Broken", "Both Worn/Broken")) +
scale_fill_discrete(name = "Female Crab Color", labels = c("light", "medium", "dark", "darker"))
spineColorBarPlot
crabs <- crabs %>% drop_na(spine, color, y)
sideBySideBarPlot <- ggplot(crabs, aes(x = color)) #define global properties
sideBySideBarPlot + geom_bar(aes(fill = y), position = "dodge") + #add local aes as well
labs(x = "Female Crab Spine Condition", y = "count") +
scale_x_discrete(labels = c("light", "medium", "dark", "darker")) +
scale_fill_discrete(name = NULL, labels = c("No Satellite", "At least 1 satellite")) +
theme(axis.text.x = element_text(angle = 45)) +
facet_grid(cols = vars(spine), scales = "free")
sideBySideBarPlot
summaryStats <- as_tibble(crabs) %>%
group_by(color, y) %>%
summarise(Avg = mean(weight), Sd = sd(weight), Median = median(weight), IQR = IQR(weight))
summaryStats
boxPlotWeight <- ggplot(crabs, aes(x = y, y = weight))
boxPlotWeight + geom_boxplot(fill = "grey") +
geom_point(aes(col=y), position = "jitter")
labs(title = "Boxplot for Weight") +
stat_summary(aes(col = y))
boxPlotWeight
boxPlotWidth <- ggplot(crabs, aes(x = y, y = width))
boxPlotWidth + geom_boxplot(fill = "grey") +
geom_point(aes(col=y), position = "jitter")
labs(title = "Boxplot for Width") +
stat_summary(aes(col = y))
boxPlotWidth
correlation <- cor(crabs$weight, crabs$width)
y <- crabs$y
scatterPlot <- ggplot(crabs, aes(x = weight, y = width))
scatterPlot + geom_point(aes(fill = y, shape = y, color = color)) +
geom_smooth() +
geom_smooth(method = lm, col = "Blue") +
labs(title = "Weight vs Width") +
scale_shape_manual(values = c(19, 17)) +
geom_text(x = 4000, y = 24, size = 4, label = paste0("Correlation = ", round(correlation, 2))) +
stat_summary(aes(col = color))
scatterPlot
rmarkdown::render("/Users/ashleebrookemckeon/Desktop/SummarizingData.Rmd", output_format = "html_document", output_dir = "/Users/ashleebrookemckeon/Desktop/")
```{r render, echo = FALSE, eval = FALSE, message = FALSE, warning = FALSE}
{r render, echo = FALSE, eval = FALSE, message = FALSE, warning = FALSE}
rmarkdown::render("/Users/ashleebrookemckeon/Desktop/SummarizingData.Rmd", output_format = "html_document", output_dir = "/Users/ashleebrookemckeon/Desktop/")
rmarkdown::render("/Users/ashleebrookemckeon/Desktop/SummarizingData.Rmd", output_format = "html_document", output_dir = "/Users/ashleebrookemckeon/Desktop/")
rmarkdown::render("/Users/ashleebrookemckeon/Desktop/SummarizingData.Rmd", output_format = "html_document", output_dir = "/Users/ashleebrookemckeon/Desktop/")
library(tidyverse, dplyr)
rmarkdown::render("/Users/ashleebrookemckeon/Desktop/SummarizingData.Rmd", output_format = "html_document", output_dir = "/Users/ashleebrookemckeon/Desktop/")
library(tidyverse, dplyr)
rmarkdown::render("/Users/ashleebrookemckeon/Desktop/SummarizingData.Rmd", output_format = "html_document", output_dir = "/Users/ashleebrookemckeon/Desktop/")
library(tidyverse, dplyr)
rmarkdown::render("/Users/ashleebrookemckeon/Desktop/SummarizingData.Rmd", output_format = "html_document", output_dir = "/Users/ashleebrookemckeon/Desktop/")
crabs <- readr::read_fwf("/Volumes/GoogleDrive/My Drive/NCSU/DSF Certificate Program/ST 558/ST558_Databases/crabs.txt", skip = 1, fwf_widths(c(3, 3, 5, 4, 5, 1), col_names = c("color","spine", "width", "satell", "weight", "y")))
crabs
library(tidyverse, dplyr)
rmarkdown::render("/Users/ashleebrookemckeon/Desktop/SummarizingData.Rmd", output_format = "html_document", output_dir = "/Users/ashleebrookemckeon/Desktop/")
